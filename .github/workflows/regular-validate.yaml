name: Regular Template Validation

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Repository for creating issues'
        required: false
      create_issue:
        description: 'Create issue if validation fails'
        default: false
  schedule:
    - cron: '0 0 1 * *' # Runs at 00:00 UTC on the first day of every month

permissions:
  contents: read
  id-token: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.list-templates.outputs.repositories }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: List templates
        id: list-templates
        working-directory: website/static
        run: |
          repositories=`jq -r '.[] | .source' templates.json | jq -Rsc '[split("\n") | .[]| select(.!="")]'`
          echo "repositories=$repositories" >> $GITHUB_OUTPUT

  validate-templates:
    if: ${{ needs.setup.outputs.repositories }}
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repo: ${{ fromJson(needs.setup.outputs.repositories) }}
    name: ${{ matrix.repo }} 
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}

    steps:
      - name: Install AZD
        uses: Azure/setup-azd@v1.0.0

      - name: Set up Python
        # This is the version of the action for setting up Python, not the Python version.
        uses: actions/setup-python@v5
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: "3.x"
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: "x64"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/validator/requirements.txt

      - name: Clone repo
        working-directory: ${{ runner.temp }}
        run: |
          git clone ${{ matrix.repo }} template
          if [ -d "./candidate-repo/hooks" ] && [ "$(ls -A ./candidate-repo/hooks/*.sh 2>/dev/null)" ]; then
            chmod +x ./candidate-repo/hooks/*.sh
          else
            echo "No hooks directory or no .sh files found in hooks directory"
          fi

      - name: Run Microsoft Security DevOps Analysis
        uses: microsoft/security-devops-action@v1
        id: msdo
        env:
          GDN_TEMPLATEANALYZER_ANALYZEDIRECTORY: ${{ runner.temp }}/template
        with:
          tools: templateanalyzer
      
      - name: Extract repo name
        id: extract_repo_name
        run: |
          repo_name=$(echo ${{ matrix.repo }} | sed -E 's|https://github.com/([^/]+/[^/]+).*|\1|')
          echo "REPO_NAME=$repo_name" >> $GITHUB_OUTPUT

      - name: Get repository topics
        id: get_repo_topics
        env:
          GITHUB_TOKEN: ${{ secrets.AI_APP_BOT_TOKEN }}
          REPO_NAME: ${{ steps.extract_repo_name.outputs.REPO_NAME }}
        run: |
          topics_list=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/${{ env.REPO_NAME }}/topics | jq -r '.names | join(",")')
          echo "topics=\"$topics_list\"" >> $GITHUB_ENV
      
      - name: Set environment name with timestamp
        id: set_env_name
        run: |
          current_time=$(date +%m%d%H%M)
          azure_env_name="${{ vars.AZURE_ENV_NAME }}-$current_time"
          echo "AZURE_ENV_NAME=$azure_env_name" >> $GITHUB_ENV

      - name: Log in with Azure (Federated Credentials)
        if: ${{ env.AZURE_CLIENT_ID != '' }}
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: Run validation
        working-directory: ${{ runner.temp }}
        run: python ${{ github.workspace }}/.github/validator/validator.py ./template --azdup --azddown --output ./output.log --topics ${{ env.TOPICS }} --msdoresult ${{ steps.msdo.outputs.sarifFile }} --debug
        env:
          AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          CREATE_IN_LOCAL: false
          TOPICS: ${{ env.topics }}

      - name: Create issue if failed
        if: ${{ github.event.inputs.create_issue == 'true' }}
        working-directory: ${{ runner.temp }}
        env: 
          GITHUB_TOKEN: ${{ secrets.AI_APP_BOT_TOKEN }}
        run: |
          if grep -q "PASSED" output.log; then
            echo "Validation passed"
          else
            echo "Validation failed, creating issue"
            input_repository=${{ github.event.inputs.repository }}
            gh issue create --title "[Auto] AI Gallery Standard Validation FAILED" --body "$(cat output.log)" --repo "${input_repository:=${{ matrix.repo }}}"
          fi
