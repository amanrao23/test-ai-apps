name: Regular Template Validation

on:
  workflow_dispatch:
    inputs:
      create_issue:
        description: 'Create or update issue if validation fails'
        default: false
  schedule:
    - cron: '0 0 1 * *' # Runs at 00:00 UTC on the first day of every month

jobs:
  setup:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.list-templates.outputs.repositories }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: List templates
        id: list-templates
        working-directory: website/static
        run: |
          repositories=`jq -r '.[] | select(.source | contains("Azure-Samples")) | .source' templates.json | jq -Rsc '[split("\n") | .[]| select(.!="")]'`
          echo "repositories=$repositories" >> $GITHUB_OUTPUT

  validate-templates:
    permissions:
      contents: read
      id-token: write
    if: ${{ needs.setup.outputs.repositories }}
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        repo: ${{ fromJson(needs.setup.outputs.repositories) }}
      max-parallel: 1
    name: ${{ matrix.repo }} 
    env:
      CI: "true"
      # For azd login
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      # Use secret since terraform does not support federated token
      ARM_CLIEND_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      # template specific variables
      AZURE_DOCUMENTINTELLIGENCE_LOCATION: ${{ vars.AZURE_DOCUMENTINTELLIGENCE_LOCATION }}
      AZURE_OPENAI_LOCATION: ${{ vars.AZURE_OPENAI_LOCATION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Clone repo
        working-directory: ${{ runner.temp }}
        run: |
          if [[ "${{ matrix.repo }}" == *"/tree/"* ]]; then
            repo_url=$(echo "${{ matrix.repo }}" | sed 's|/tree/.*||')
            branch_name=$(echo "${{ matrix.repo }}" | sed 's|.*tree/||')
            git clone -b $branch_name $repo_url template
          else
            git clone ${{ matrix.repo }} template
          fi
          candidate_hooks_paths=("./template/hooks" "./template/infra/hooks" "./template/scripts" "./template/deploy/aca/scripts" "./template/deploy/aks/scripts" "./template/deploy/app-service/scripts")

          for hooks_path in "${candidate_hooks_paths[@]}"; do
            if [ -d "$hooks_path" ] && [ "$(ls -A $hooks_path/*.sh 2>/dev/null)" ]; then
              chmod +x $hooks_path/*.sh
              echo "Executable permissions set for .sh files in $hooks_path"
            else
              echo "No hooks directory or no .sh files found in $hooks_path"
            fi
          done

      - name: Extract repo name
        id: extract_repo_name
        run: |
          repo_name=$(echo ${{ matrix.repo }} | sed -E 's|https://github.com/([^/]+/[^/]+).*|\1|')
          echo "REPO_NAME=$repo_name" >> $GITHUB_OUTPUT

      - name: Set environment name with job id
        run: |
          jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id}}/attempts/${{ github.run_attempt }}/jobs)
          job_id=$(echo $jobs | jq -r '.jobs[] | select(.runner_name=="${{ runner.name }}") | .id')
          env_name="${{ vars.AZURE_ENV_NAME }}$job_id"
          echo "AZURE_ENV_NAME=$env_name" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # TODO: Refine the logic to pick location based on scenario rather than repo name
      - name: Pick available location for specific templates
        id: pick_location
        run: |
          if [[ "${{ steps.extract_repo_name.outputs.REPO_NAME }}" == "Azure-Samples/agent-openai-python-prompty" ]]; then
            echo "AZURE_LOCATION=${{ vars.AZURE_GPT4O_LOCATION }}" >> $GITHUB_ENV
          elif [[ "${{ steps.extract_repo_name.outputs.REPO_NAME }}" == "Azure-Samples/assistant-data-openai-python-promptflow" ]]; then
            echo "AZURE_LOCATION=${{ vars.AZURE_OPENAI_TURBO_LOCATION }}" >> $GITHUB_ENV
          else
            echo "AZURE_LOCATION=${{ vars.AZURE_LOCATION }}" >> $GITHUB_ENV
          fi
      
      - name: Set customized environment variables
        id: set_custom_env
        run: |
          if [[ "${{ steps.extract_repo_name.outputs.REPO_NAME }}" == "Azure-Samples/azure-search-openai-demo-java" || "${{ steps.extract_repo_name.outputs.REPO_NAME }}" == "Azure-Samples/azure-search-openai-demo-csharp" ]]; then
            echo "MOCKED_OPENAI_API_KEY=sample-key" >> $GITHUB_ENV
          fi

      - id: validation
        uses: microsoft/template-validation-action@main
        with:
          workingDirectory: ${{ runner.temp }}/template
        env:
          REPOSITORY_NAME: ${{ steps.extract_repo_name.outputs.REPO_NAME }}
          AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
          OPENAI_API_KEY: ${{ env.MOCKED_OPENAI_API_KEY }}
          AZD_PREPDOCS_RAN: "false"
          SERVICE_API_RESOURCE_EXISTS: "false"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - id: check_result
        run: |
          if grep -q "FAILED" "${{ steps.validation.outputs.resultFile }}"; then
            echo "RESULT=FAILED" >> $GITHUB_OUTPUT
          else
            echo "RESULT=PASSED" >> $GITHUB_OUTPUT
          fi

      - name: Create or update issue if failed
        if: github.event.inputs.create_issue == 'true' && steps.check_result.outputs.RESULT == 'FAILED'
        env: 
          GITHUB_TOKEN: ${{ secrets.AI_APP_BOT_TOKEN }}
        run: |
          echo "Validation failed, creating issue"
          repo="${{ steps.extract_repo_name.outputs.REPO_NAME }}"
          issue_number=$(gh issue list --author "ai-apps-bot" --repo "$repo" --state "all" --json number | jq -r '.[0].number')
          if [ "null" == $issue_number ]; then
            gh issue create --title "[Auto] AI Gallery Standard Validation FAILED" --body-file "${{ steps.validation.outputs.resultFile }}" --repo $repo
          else
            gh issue edit $issue_number --body-file "${{ steps.validation.outputs.resultFile }}" --repo $repo
          fi

      - name: Close issue if passed
        if: github.event.inputs.create_issue == 'true' && steps.check_result.outputs.RESULT == 'PASSED'
        env: 
          GITHUB_TOKEN: ${{ secrets.AI_APP_BOT_TOKEN }}
        run: |
          echo "Validation passed, close opened issue"
          repo="${{ steps.extract_repo_name.outputs.REPO_NAME }}"
          issue_number=$(gh issue list --author "ai-apps-bot" --repo "$repo" --json number | jq -r '.[0].number')
          if [ "null" != $issue_number ]; then
            gh issue edit $issue_number --body-file "${{ steps.validation.outputs.resultFile }}" --repo $repo
            gh issue close $issue_number --repo $repo --reason "Validation passed"
          fi
      
      - name: Exit with failure if validation failed
        if: steps.check_result.outputs.RESULT == 'FAILED'
        run: exit 1
